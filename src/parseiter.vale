import stdlib.stringutils.*;

struct ParseIter {
  code StrSlice;
  pos! int;
}
func Rest(self &ParseIter) StrSlice { self.code.slice(self.pos) }
func PreviousChar(self &ParseIter) str {
  if self.pos == 0 {
    return "\u0000";
  }
  return self.code.slice(self.pos - 1, self.pos).str();
}
func ParseIter(s StrSlice) ParseIter {
  ParseIter(s, 0)
}
func copy(iter &ParseIter) ParseIter {
  ParseIter(iter.code, iter.pos)
}
func copyInto(iter &ParseIter, dest &ParseIter) {
  set dest.pos = iter.pos;
}
func nextIs(self &ParseIter, needle str) bool {
  self.Rest().startsWith(needle)
}
func nextIn(self &ParseIter, needles str) bool {
  needles.contains(self.peek())
}
func expectPeek(self &ParseIter, needle str) {
  self.expectPeek(needle.slice());
}
func expectPeek(self &ParseIter, needle StrSlice) {
  vassert(self.Rest().startsWith(needle), "Expected " + needle);
}
func skipExpect(self &ParseIter, needle str) { skipExpect(self, needle.slice()) }
func skipExpect(self &ParseIter, needle StrSlice) {
  expectPeek(self, needle);
  set self.pos = self.pos + needle.len();
}
func skipIfNext(self &ParseIter, needle str) bool { self.skipIfNext(needle.slice()) }
func skipIfNext(self &ParseIter, needle StrSlice) bool {
  if self.Rest().startsWith(needle) {
    skipExpect(self, needle);
    true
  } else {
    false
  }
}
func skipIfEndsWith(self &ParseIter, needle str) bool { self.skipIfEndsWith(needle.slice()) }
func skipIfEndsWith(self &ParseIter, needle StrSlice) bool {
  if self.Rest() == needle {
    skipExpect(self, self.Rest());
    true
  } else {
    false
  }
}
// func getUntilExpected(self &ParseIter, splitNeedle &IFunction1<mut, StrSlice, bool>) StrSlice {
//   maybeLineAndRest = self.Rest().splitOnce(splitNeedle);
//   if maybeLineAndRest.isEmpty() {
//     panic("Expected attribute line or --- but received:\n" + self.Rest());
//   }
//   (line, newRest) = maybeLineAndRest.get();
//   set self.Rest() = newRest;
//   = line;
// }
func getUntilExpected(self &ParseIter, needle str) StrSlice {
  if needle.len() == 0 {
    panic("getUntilExpected: Invalid argument: needle is empty!");
  }


  maybeOffsetAfterBegin = self.Rest().find(needle);
  if maybeOffsetAfterBegin.isEmpty() {
    panic("Expected " + needle + " but received:\n" + self.Rest());
  }
  needleOffset = (maybeOffsetAfterBegin).get();
  result = self.Rest().slice(0, needleOffset);
  set self.pos = self.pos + needleOffset + needle.len();
  result
}
func getUntilMaybe(self &ParseIter, needle str) StrSlice {
  if needle.len() == 0 {
    panic("getUntilExpected: Invalid argument: needle is empty!");
  }
  maybeBeforeAndRest = self.Rest().splitOnce(needle);
  if maybeBeforeAndRest.isEmpty() {
    before = self.Rest();
    set self.pos = self.code.len();
    return before;
  }
  [before, newRest] = maybeBeforeAndRest.get();
  set self.pos = self.pos + before.len() + needle.len();
  return before;
}
func getNext(self &ParseIter) StrSlice {
  result = self.Rest().slice(0, 1);
  set self.pos = self.pos + 1;
  result
}
func hasNext(self &ParseIter) bool {
  self.pos < self.code.len()
}
func peek(self &ParseIter) StrSlice {
  vassert(self.hasNext(), "Can't peek, nothing left");
  return self.Rest().slice(0, 1);
}


func skipIfNextChar<F>(self &ParseIter, f &F) bool
where func(&F, StrSlice)bool {
  if self.hasNext() and (f)(self.Rest().slice(0, 1)) {
    set self.pos = self.pos + 1;
    return true;
  } else {
    return false;
  }
}


//func nextIsTag(originalIter &ParseIter) Opt<StrSlice> {
//  input = copy(originalIter);
//  input.skipWhitespace();
//}

func skipWhitespace(input &ParseIter) {
  while input.skipIfNextChar(x => isWhitespace(x)) {
  }
}

func skipNewlines(input &ParseIter) {
  while (input.skipIfNextChar({ _ == "\n" })) {
  }
}

func isWordChar(s StrSlice) bool {
  ascii = s.slice(0, 1).toAscii();
  if ascii >= "A".slice().toAscii() and ascii <= "Z".slice().toAscii() {
    return true;
  }
  if ascii >= "a".slice().toAscii() and ascii <= "z".slice().toAscii() {
    return true;
  }
  if ascii >= "0".slice().toAscii() and ascii <= "9".slice().toAscii() {
    return true;
  }
  if ascii == "_".slice().toAscii() {
    return true;
  }
  return false;
}

func nextNumericChar(originalIter &ParseIter) Opt<int> {
  tentativeIter = originalIter.copy();

  if not tentativeIter.hasNext() {
    return None<int>();
  }
  digitStr = tentativeIter.getNext();
  ascii = toAscii(digitStr);

  zeroAscii = "0".toAscii();
  digit = ascii - zeroAscii;
  if digit < 0 or digit > 9 {
    return None<int>();
  }

  tentativeIter.copyInto(originalIter);
  return Some(digit);
}

func TextPosition(iter &ParseIter) TextPosition {
  TextPosition(iter.code, iter.pos)
}
